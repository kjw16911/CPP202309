bool 타입에서 0 이외의 숫자는 모두 참으로 반환

* 조건문
프로그램이 특정 조건에 따라 다른 동작을 수행하도록 하는 프로그래밍 구조
-if-else문
if
if-else
중첩 if-else


* switch문 (파이썬에는 없음)
케이스에 따라 다른 동작을 수행할 때 사용되는 제어구조
표현식의 결과값이 case에 들어가는 값과 같은지를 확인

break문
break를 쓰지 않을 경우 계속해서 문장을 실행시킴.
아래 문장을 더 이상 실행시키지 않겠다.

if문과 switch문은 같은 기능을 하게끔 만들 수 있음.

-증감연산자
선행 증감
후행 증감
취향에 따라 사용

-반복문
for (초기식 ; 조건식 ; 증감식) => 리스트 순회
{	수행코드
}

while (조건식) : 조건식을 확인하고 참이면 문장 수행 => 사용자 입력 처리
{	수행코드
}

do_while       : 문장을 1번 수행하고 조건식을 확인함. 확인 후 참이면 문장 수행
do {	수행코드
 } while(조건식)
=> 메뉴 선택(사용자에게 질문을 하는 경우에 사용됨)

-break문 : 반복문을 즉각 종료

-continue문 : 다음 반복을 즉각 진행

-이중조건문 : 조건문 안에 조건문을 겹치게 작성. n중으로도 가능

-이중반복문 : 반복문 안에 반복문을 겹치게 작성. n중으로도 가능

c랑 c++은 배열에서 같은 자료형으로 넣어야됨.

* 기말 대체 프로젝트
주제 선정 및 기능 계획
필요 함수 및 클래스 구현
포인터 적용

* 디버깅
소프트웨어에서 오류를 찾고 수정하는 과정
- 오류가 난 부분 근처에 값을 출력
=> 직접 눈으로 어떤 변수가 오류인지 확인할 수 있음.

디버거 : 실행 중인 프로그램 상태를 모니터링/제어하는 도구
	- 변수 모니터링 : 실행 중인 변수 값 모니터링
	- 스텝 실행 : 각 문장 단위로 실행을 진행
	- 중단점 설정 :  
	- 스택 추적 : 
	- 메모리 상태 확인 : 
	- 변수 값 설정 : 
1. 
2.
3. 
4. 한 줄 씩 실행
 F10 : 현재 함수 내에서 다음 줄 이동	
 F11 : 함수 내부로 들어가면서 다음 줄 이동

* 함수
함수를 정의할 때 사용한 반환형과 body에 return하는 반환값의 자료형이 일치해야함.
매개변수를 미리 초기화할 수 있음 - 함수를 선언할 때 변수에 값을 입력
매개변수가 없는 경우도 있음 - 그럴 때는 () 안을 비우거나 void를 작성

함수의 반환값 (return value)
함수가 끝나면 밖으로 반환되는 값으로 변수나 상수 값이 반환됨.
return이라는 예약어를 사용하여 함수 종료시킴.
반환값이 없는 경우 함수 앞에 void를 작성
void를 사용할 때는 return 사용 금지

main함수
매개변수 int argc, char*argv[] ...

함수 원형 선언하기
이유 : 컴파일러는 소스 코드를 번역할 때, 위에서 아래 방향으로 변역
피호출자가 호출자 위쪽에 있는 경우 오류 없음
-> 컴파일러가 피호출자를 이미 알고 있기 때문
피호출자가 호출자 아래쪽에 있는 경우 오류 발생
-> 컴파일러가 피호출자를 알지 못하기 때문에 호출 관련 코드 구성 불가

함수 원형을 선언할 때 함수명, 매개변수, 반환형을 포함한 표현식으로 
자세한 함수를 작성하기 전 미리 호출하는 용도

헤더파일로 함수 관리하기
헤더파일이란 함수, 클래스, 변수 등의 선언을 포함하는 텍스트 파일
미리 헤더 파일을 만들어 놓으면 #include "파일명"을 통해 관련 코드를 사용 가능
소스코드가 길고 소스파일이 많아질수록 관리가 어렵기 때문에 헤더 파일을 만들어서 관리함.
